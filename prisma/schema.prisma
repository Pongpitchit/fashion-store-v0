// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  lineId      String?  @unique
  displayName String?
  pictureUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders    Order[]
  favorites UserFavorite[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  nameEn      String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logoUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("brands")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  sku           String   @unique
  imageUrl      String
  images        String[] @default([])
  isActive      Boolean  @default(true)
  isNew         Boolean  @default(false)
  isSale        Boolean  @default(false)
  stock         Int      @default(0)
  sizes         String[] @default([])
  colors        String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign Keys
  categoryId String
  brandId    String

  // Relations
  category  Category       @relation(fields: [categoryId], references: [id])
  brand     Brand          @relation(fields: [brandId], references: [id])
  favorites UserFavorite[]
  orderItems OrderItem[]
  reviews   Review[]

  @@map("products")
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("user_favorites")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  shippingFee Decimal     @default(0) @db.Decimal(10, 2)
  discount    Decimal     @default(0) @db.Decimal(10, 2)
  
  // Shipping Info
  shippingName    String
  shippingPhone   String
  shippingAddress String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  size      String?
  color     String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
